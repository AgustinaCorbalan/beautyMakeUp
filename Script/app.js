/*LLEGAMOS AL ARCHIVO .JS üò® QUE MIEDOO... NO MENTIRA! LO AMAMOSS üíö */
/*Para qu√© necesitamos javascript? bueno basicamente nos ayuda much√≠simo con el funcionamiento de la app, permite que interactuamos y sea m√°s din√°mica*/
/*Sin m√°s preambulos, veamos lo que son las variables: En criollo, son como cajones donde guardamos cosas, qu√© cosas? datos, qu√© tipo de datos? pueden ser n√∫mericos, texto(string), booleanos(false,true), objetos, etc. Podemos acceder, usarlas, referenciarlas y modificarlas.
para declararla lo hacemos de esta manera: "let nombre;" ser√≠a como nombrar a ese "caj√≥n" (dato importante: el nombre de la letiable debe ser lo m√°s descriptivo posible, es decir, que con solo ver el nombre, ya tengas una idea de lo qu est√° almacenando)
para definirla, es decir, asignarle un valor (que es lo que vas a almacenar en ese "caj√≥n") se hace de esta manera: usamos el operador "=", en este caso, creamos la letiable nombre, por lo tanto --> nombre = "Homero" *
hay tres formas para crear variables --> con: var, let y const
breve explicaci√≥n de cada una: var: puede re-declararse osea, a la variable nombre que declar√© puedo modificarla: var nombre = "Marge" (vas a pensar que hay dos variables llamadas igual, pero tranqui que no va a dar ning√∫n error, se va a quedar con la √∫ltima declara osea la "pisa". 
Podemos cambiar el valor sin problemas osea: nombre = "Bart".
Tiene √°mbito/contexto global: osea que puedo acceder en cualquier momento y lugar (y por esto ya se dej√≥ de usar, puede generar accidentes en el c√≥digo) por lo que lo m√°s recomendable es usar let --> 
let: no puede re-declararse, si probamos lo mismo que hicimos var vamos a tener este error: "has already been declared" osea ese nombre ya est√° usado digamos.
Puede reasignarse como var. y tiene alcance local o de funci√≥n.
const: no puede re-declararse. pasa lo mismo que con let. 
no puede reasignarse. como el nombre lo dice "constante" nunca cambia. Si lo intentamos tenemos un ‚ÄúTypeError: Assignment to constant variable‚Äù.
y tambi√©n tiene alcance local o de funci√≥n. hay m√°s diferencias pero estas son las m√°s importantes.
aah importante! javascript, Case Sensitive, osea, diferencia entre may√∫sculas y min√∫sculas, as√≠ que ojo con eso! üëÄ

/*Bueno ahora si*/
/*Vamos a crear un modal para nuestro formulario de contacto, ¬øqu√© es un modal? es una ventana emergente que se activa cuando el usuario hace clic en un enlace o presiona un bot√≥n y no puede interactuar con el fondo hasta que lo cierre*/
/*para crearlo necesitamos dos "cajitas" (previamente definido en el html) una va a ser el modal, osea la ventana y la otra va a ser, la que la contiene (modal-container) */
let modal = document.querySelector(".modal-container"); // ac√° estamos declarando una variable modal que va a almacenar, en este caso el selector css de clase, c√≥mo lo obtuvimos? primero accedemos a toooodos los metodos que brinda el DOM con "document."(document object model: basicamente tooda la estructura del html) y querySelector es un m√©todo en JavaScript que se utiliza para seleccionar los elementos html utilizando selectores CSS. Podemos acceder y modificarlos, en este caso, accedimos al contenedor del modal (lo que hablamos arriba)
let openModal = document.querySelector("#contact-button"); // por ac√° lo mismo, accedo y obtengo el selector ID css del bot√≥n para abrir el formulario.
let closeModal = document.querySelector("#close-button"); // Lo mismo, guardo en la variable closeModal (que al ser descriptivo ya te das una idea para que lo voy a usar verdad? gui√±o gui√±o)
let inputNombre = document.querySelector('input[name="name"]'); // Por ac√° voy a guardar en la variable inputNombre, el atributo name del input (definido en el html). osea, como en un formulario hay varios inputs, necesito una forma para identificarlos, si ya s√©, puedo usar el id, peeeero m√°s abajo vas a entender por qu√© acced√≠ con atributos
let inputApellido = document.querySelector('input[name="lastName"]');
let inputMail = document.querySelector('input[name="mail"]');

openModal.addEventListener("click", function (event) {
  // por ac√° estamos usando el metodo addEventListener (metodo que brinda el document.) par√° que sirve? lo que hace es "escuchar" cuando sucede un evento, osea cuando pasa una acci√≥n en el dom, se√±al de que algo pas√≥ en este cas√≥ va a estar atento a un "click".
  event.preventDefault(); // event es el objeto que va a "gestionar/escuchar" la acci√≥n, y preventDefault va a prevenir un comportamiento por defecto en la app, osea va a prevenir que se abra por ej el modal sin haber hecho click todavia.
  modal.classList.add("active"); // modal es la variable creada en la linea 19, y yo ahora estoy accediendo a sus metodos que almacen√© previamente. y le estoy agregando la clase active en css al modal donde voy a establecer el estilo para mostrar el modal cuando se haga click en el bot√≥n.
});

closeModal.addEventListener("click", (event) => {
  // por ac√° lo mismo pero voy remover osea "limpio" todo el estilo cuando hago click en otro bot√≥n.
  event.preventDefault();
  modal.classList.remove("active");
  inputNombre.value = ""; // y ac√° estoy accediendo al valor del input que pide el nombre del usuario, osea accedo a lo que el usuario escribe en el campo y al cerrar el modal limpia todos los campos.
  inputApellido.value = "";
  inputMail.value = "";
});

let formatoMail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; // guardo en esta variable un expresion regular, es bastante amplia la explicaci√≥n pero basicamente son formatos preestablecidos para validar comunmente un formulario, (claramente existen un mont√≥n de formatos para validaciones, este por ej es para validar un correo electronico que tenga un @, un . y texto)

// por ac√° tenemos una funci√≥n, (bah ya nos habiamos topado con una pero era anonima y no me servia la explicaci√≥n üò¨) qu√© es? es un bloque de codigo que en este caso va de la linea 44 a la 46, que realiza una acci√≥n determinada y la puedo ejecutar (poner en pr√°ctica) en cualquier momento.
function validarTexto(texto) {
  // se crea con la palabra "function"seguido de un nombre (de nuevo, DESCRIPTIVO, que me diga que es lo que hace) y puede contener o no, un parametro "(texto)" en este caso, es una variable que se le pasa como entrada, osea por ejemplo, una maquina de helado, su funci√≥n va a hacer toodo el proceso de creaci√≥n de helado, y la crema o leche (no s√©) va a hacer el parametro que va a entrar para pasar por ese proceso y devuelve (return) el preducto final (helado)
  return /^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö\s]+$/.test(texto); // pero en este caso va a recibir un texto (el valor del input que el usuario va a escribir en el campo) y va a devolver true, en caso de que el texto cumpla con la validaci√≥n y sino devuelve false. (.test() es un metodo de las expresiones regulares)
}

function inputVac√≠o(value) {
  // en este caso, esta funci√≥n devuelve true si el campo del input est√° vac√≠o (.trim metodo de string osea texto, elimina espacios en blanco si los tuvise por ej si le pasa un string que diga "ho la" elimina ese espacio y lo convierte en "hola")
  return value.trim() === "";
}

function enviarFormulario(event) {
  // ac√° tenemos la funci√≥n que va a generar el env√≠o del formulario, se le pasa el event que va a ser el click del bot√≥n "enviar y por dentro tiene muchas validaciones, veamos.."
  event.preventDefault();

  let nombre = document.getElementById("name").value; // por ac√° guardamos en la variable nombre, el valor del input que obtengo con document.getElementById similiar a querySelector pero getElementById hace referencia a un elemento que tenga un id √∫nico.
  let apellido = document.getElementById("lastName").value;
  let mail = document.getElementById("mail").value;

  if (inputVac√≠o(nombre) || inputVac√≠o(apellido) || inputVac√≠o(mail)) {
    // por ac√° escotramos una estructura if, else if.. que son? condicionales, osea ejecuta una sentencia (osea lo que tiene que hacer) si una condici√≥n es evaluada como verdadera. Si la condici√≥n es evaluada como falsa, otra sentencia puede ser ejecutada.
    // en este caso, evalua si los input nombre, √≥ apellido √≥ mail est√°n vacios osea si su valor est√° vac√≠o
    inputNombre.setAttribute("placeholder", "Debe ingresar su nombre"); // si es verdadero, y por ac√° volvemos a lo que dec√≠a en la linea 23, por qu√© us√© el atributo y no el id, con el atributo, puedo acceder al metodo setAttribute, que me va a permitir modificar el atributo "placeholder" en este caso para mostrar un mensaje de advertencia en caso de que no se cumpla la condici√≥n.
    inputApellido.setAttribute("placeholder", "Debe ingresar su apellido");
    inputMail.setAttribute("placeholder", "Debe ingresar su mail");
  } else if (!validarTexto(nombre)) {
    // si no, si (es lo que dice el condicional) el usuario escribe en el campo, caracteres especiales como @-, etc, o n√∫meros (esto lo comprueba ejecutando la funci√≥n "validarTexto()" genera otro mensaje como placeholder (mensaje sobre el campo que desapacere al escribir))
    inputNombre.setAttribute("placeholder", "Ingrese un nombre v√°lido");
    inputNombre.value = "";
  } else if (!validarTexto(apellido)) {
    inputApellido.setAttribute("placeholder", "Ingrese un apellido v√°lido");
    inputApellido.value = "";
  } else if (!formatoMail.test(mail)) {
    inputMail.setAttribute("placeholder", "Ingrese un mail v√°lido");
    inputMail.value = "";
  } else {
    window.location.replace("./Pages/form.html"); // cuando termina de evaluar todas las condiciones, finalmente devuelve el resultado que ser√≠a en este caso, enviar el formulario al enlace seleccionado
  }
}
